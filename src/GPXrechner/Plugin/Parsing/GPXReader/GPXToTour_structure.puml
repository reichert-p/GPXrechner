@startuml

/' diagram meta data start
config=StructureConfiguration;
{
  "projectClassification": {
    "searchMode": "OpenProject", // OpenProject, AllProjects
    "includedProjects": "",
    "pathEndKeywords": "*.impl",
    "isClientPath": "",
    "isClientName": "",
    "isTestPath": "",
    "isTestName": "",
    "isMappingPath": "",
    "isMappingName": "",
    "isDataAccessPath": "",
    "isDataAccessName": "",
    "isDataStructurePath": "",
    "isDataStructureName": "",
    "isInterfaceStructuresPath": "",
    "isInterfaceStructuresName": "",
    "isEntryPointPath": "",
    "isEntryPointName": "",
    "treatFinalFieldsAsMandatory": false
  },
  "graphRestriction": {
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "removeByInheritance": "", // inheritance/annotation based filtering is done in a second step
    "removeByAnnotation": "",
    "removeByClassPackage": "", // cleanup the graph after inheritance/annotation based filtering is done
    "removeByClassName": "",
    "cutMappings": false,
    "cutEnum": true,
    "cutTests": true,
    "cutClient": true,
    "cutDataAccess": true,
    "cutInterfaceStructures": true,
    "cutDataStructures": true,
    "cutGetterAndSetter": true,
    "cutConstructors": true
  },
  "graphTraversal": {
    "forwardDepth": 0,
    "backwardDepth": 1,
    "classPackageExcludeFilter": "",
    "classPackageIncludeFilter": "",
    "classNameExcludeFilter": "GPXToTrack",
    "classNameIncludeFilter": "",
    "methodNameExcludeFilter": "",
    "methodNameIncludeFilter": "",
    "hideMappings": false,
    "hideDataStructures": false,
    "hidePrivateMethods": true,
    "hideInterfaceCalls": false, // indirection: implementation -> interface (is hidden) -> implementation
    "onlyShowApplicationEntryPoints": false, // root node is included
    "useMethodCallsForStructureDiagram": "BothDirections" // ForwardOnly, BothDirections, No
  },
  "details": {
    "aggregation": "GroupByClass", // ByClass, GroupByClass, None
    "showClassGenericTypes": true,
    "showMethods": true,
    "showMethodParameterNames": true,
    "showMethodParameterTypes": true,
    "showMethodReturnType": true,
    "showPackageLevels": 2,
    "showDetailedClassStructure": true
  },
  "rootClass": "GPXrechner.Plugin.Parsing.GPXReader.GPXToTour",
  "extensionCallbackMethod": "" // qualified.class.name#methodName - signature: public static String method(String)
}
diagram meta data end '/



digraph g {
    rankdir="TB"
    splines=polyline
    

'nodes 
subgraph cluster_1072845520 { 
   	label=Application
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   XMLParser402627690[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(I)XMLParser</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ read(path: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#F1E5FD"
];

subgraph cluster_899390013 { 
   	label=Instructions
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   ReadPath1197983005[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ReadPath</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   userInput: UserInput [0..1]</TD></TR>
<TR><TD ALIGN="LEFT" >#   userOutput: UserOutput [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ execute(state: State): State</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

subgraph cluster_1901307053 { 
   	label=Plugin
	labeljust=l
	fillcolor="#ececec"
	style=filled
   
   subgraph cluster_1723619061 { 
   	label=Parsing
	labeljust=l
	fillcolor="#d8d8d8"
	style=filled
   
   ConsoleParsing880033487[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)ConsoleParsing</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   userOutput: UserOutput [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ getInstruction(instructions: Instruction[]): Instruction</TD></TR>
<TR><TD ALIGN="LEFT" >+ parseEvaluationFunction(evaluationFunctions: EvaluationFunction[]): EvaluationFunction</TD></TR>
<TR><TD ALIGN="LEFT" >+ parseMaxDuration(): Duration</TD></TR>
<TR><TD ALIGN="LEFT" >+ parseMovementSpeed(): MovementSpeed</TD></TR>
<TR><TD ALIGN="LEFT" >+ pathsToMovementSpeeds(): MovementSpeed</TD></TR>
<TR><TD ALIGN="LEFT" >+ readPath(): String</TD></TR>
<TR><TD ALIGN="LEFT" >+ readPaths(): String[]</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];

GPXToTour923078099[
	label=<<TABLE BORDER="1" CELLBORDER="0" CELLPADDING="4" CELLSPACING="0">
<TR><TD ALIGN="LEFT" >(C)GPXToTour</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >#   tour: Tour [0..1]</TD></TR>
<HR/>
<TR><TD ALIGN="LEFT" >+ read(path: String)</TD></TR>
</TABLE>>
	style=filled
	margin=0
	shape=plaintext
	fillcolor="#FFFFFF"
];
} 
} 

'edges    
ConsoleParsing880033487 -> GPXToTour923078099[label="pathsToMovementSpeeds() -> read()"];
ReadPath1197983005 -> GPXToTour923078099[label="execute() -> read()"];
XMLParser402627690 -> GPXToTour923078099[arrowhead=none, arrowtail=empty, dir=both];
    
}
@enduml